

import java.util.regex.Pattern;

public class PassWordCheckUtil {
	
	/**
	 * 
	 * @Title: checkPassWord   
	 * @Description: 返回true时 密码为简单密码    111111 或者 包含 递减654321 递增 123456等
	 * @param: @param passWord
	 * @param: @return      
	 * @return: boolean      
	 * @throws
	 */
	public static boolean checkPassWord(String passWord){
		boolean rs =false;
		//纯数字的再做验证
		String regex ="^\\d+$";
		if(Pattern.matches(regex,passWord)){
			//验证不能为纯同一个数字   111111
			regex  ="(\\d)\\1{5,12}";
			rs = Pattern.matches(regex,passWord);
			
			//验证是否为连续递增货递减
			if( !rs  ){
				return checkNumAsc(passWord) || checkNumDesc(passWord);
			}
		}; 
		return rs;
	}
	
	public static boolean checkNumAsc(String str){
		boolean rs=false;
		bb:for( int j =0;j<str.length();j++ ){
			int count =0;
			for( int i =j;i<str.length()-1;i++ ){
				if ( Integer.valueOf(str.charAt(i+1)) -Integer.valueOf(str.charAt(i))  ==1 ){
					count ++;
				}
				if( count==5 ){
					rs =true ;
					break bb;
				}
			}
		}
		return rs;
	} 

	//判断是否为6为连续递
	public static boolean checkNumDesc(String str){
		boolean rs=false;
		bb:for( int j =0;j<str.length();j++ ){
			int count =0;
			for( int i =j;i<str.length()-1;i++ ){
				if ( Integer.valueOf(str.charAt(i)-Integer.valueOf(str.charAt(i+1)))  ==1 ){
					count ++;
				}
				if( count==5 ){
					rs =true ;
					break bb;
				}
			}
		}
		return rs;
	} 
	
	
	public static void main(String[] args) {
/*		String regex  ="^\\d(?:(?<=0)1|(?<=1)2|(?<=2)3|(?<=3)4|(?<=4)5|(?<=5)6|(?<=6)7|(?<=7)8|(?<=8)9){2}$";
		System.out.println(Pattern.matches(regex,"12345678"));*/
		
		System.out.println(PassWordCheckUtil.checkPassWord("85432106"));
	}
}
